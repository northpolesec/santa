export type SantaConfigGroups = {
  general: SantaConfigKey[];
  sync: SantaConfigKey[];
  gui: SantaConfigKey[];
  faa: SantaConfigKey[];
  rules: SantaConfigKey[];
  telemetry: SantaConfigKey[];
  usb: SantaConfigKey[];
  metrics: SantaConfigKey[];
};

// Represents a single Santa configuration key as stored in the dictionary.
export type SantaConfigKey = {
  // The Key of the value.
  key: string;

  // The description for this configuration item.
  description: string;

  // The type of this key. Maps to the related plist types.
  type: "string" | "bool" | "integer" | "data" | "dict";

  // If the key is really an array of the specified type, this will be true.
  repeated?: boolean;

  // The default value for this key, if there is one.
  defaultValue?: any;

  // If the key is true, this key is overridable by a sync server.
  syncConfigurable?: boolean;

  // The maximum length of the value.
  maxLength?: number;

  // A fixed set of possible values.
  possibleValues?: SantaPossibleValue[];

  // If the type is "dict", this specifies the possible fields inside the dict.
  subFields?: SantaConfigKey[];

  // What version of Santa added/deprecated support for this key.
  versionAdded?: string;
  versionDeprecated?: string;
};

// Represents a possible value for keys that accept a limited set of options.
export type SantaPossibleValue = {
  // The value to store in the generated config.
  value: any;

  // An optional label to display.
  label?: string;

  // An optional description associated with this value.
  description?: string;

  // What version of Santa added/deprecated support for this value.
  versionAdded?: string;
  versionDeprecated?: string;
};

// SantaConfigKeyGroups represents all of the possible configuration options
// supported by the Santa client, organized into groups. The groups are not
// represented in any generated config.
export const SantaConfigKeyGroups: SantaConfigGroups = {
  general: [
    {
      key: "ClientMode",
      description: "The client mode that Santa should operate in.",
      type: "integer",
      syncConfigurable: true,
      defaultValue: 1,
      possibleValues: [
        {
          value: 1,
          label: "Monitor",
          description:
            "Executions of binaries not covered by a rule will be allowed",
        },
        {
          value: 2,
          label: "Lockdown",
          description:
            "Executions of binaries not covered by a rule will be blocked",
        },
        {
          value: 3,
          label: "Standalone",
          description:
            "Executions of binaries not covered by a rule will trigger an authorization dialog",
          versionAdded: "2024.11",
        },
      ],
    },
    {
      key: "FailClosed",
      description: `If true and the ClientMode is in \`LOCKDOWN\`: execution will be denied when there is an error reading
        or processing an executable file and when Santa has to make a default response just prior to deadlines expiring.`,
      defaultValue: false,
      type: "bool",
    },
    {
      key: "EnableStandalonePasswordFallback",
      description:
        "If true, Santa will fallback to password authorization for Standalone mode.",
      type: "bool",
      defaultValue: true,
    },
    {
      key: "IgnoreOtherEndpointSecurityClients",
      description: `If true, Santa will not process events that are generated by other EndpointSecurity clients that
        may be installed on the system`,
      type: "bool",
      defaultValue: false,
    },
    {
      key: "EnableDebugLogging",
      description: `If true, the client will log additional debug messages to the Apple Unified Log. For example,
        transitive rule creation logs can be viewed with \`log stream --predicate 'sender=="com.northpolesec.santa.daemon"'\``,
      type: "bool",
      defaultValue: false,
    },
    {
      key: "EnableStatsCollection",
      description: `If true, Santa will periodically collect and send basic, non-identifying stats to the maintainers
        at North Pole Security to help better support Santa. See Stats documentation for complete details`,
      type: "bool",
      defaultValue: false,
    },
    {
      key: "StatsOrganizationID",
      description: `This key should only be set for organizations that have a contract with North Pole Security.
        See Stats documentation for complete details`,
      type: "string",
    },
  ],
  gui: [
    {
      key: "EnableSilentMode",
      description: `If true, Santa will not post any GUI notifications. This can be a very confusing experience for
        users, use with caution`,
      type: "bool",
      defaultValue: false,
    },
    {
      key: "EnableSilentTTYMode",
      description: `If true, Santa will not post any TTY notifications. This can be a very confusing experience for
        users, use with caution`,
      type: "bool",
      defaultValue: false,
    },
    {
      key: "AboutText",
      description: `The text to display when the user opens Santa.app. If unset, the default text will be displayed`,
      type: "string",
    },
    {
      key: "MoreInfoURL",
      description: `The URL to open when the user clicks “More Info…” when opening Santa.app. If unset, the button
        will not be displayed`,
      type: "string",
    },
    {
      key: "EventDetailURL",
      description: `When the user gets a block notification, a button can be displayed which will take them to a web
      page with more information about that event. This URL will be used for all rules unless overridden by a
      rule-specific option.

This property supports several placeholders in the string that will be replaced before the URL is constructefd
to be turned into the URL to send them to. The following
sequences will be replaced in the final URL:

| Placeholder                 | Description                                    |
| --------------------------- | ---------------------------------------------- |
| %file_identifier%	          | SHA-256 of the file that was blocked |
| %bundle_or_file_identifier% | SHA-256 of the file that was blocked or the bundle containing it, if available |
| %file_bundle_id%            | The bundle ID that this binary is part of, if any |
| %team_id%                   | The team ID that signed this binary, if any |
| %signing_id%                | The signing ID of this binary, if any |
| %cdhash%                    | The binary's CDHash, if any |
| %machine_id%                | ID of the machine |
| %username%                  | The executing user |
| %serial%                    | System's serial number |
| %uuid%                      | System's UUID |
| %hostname%                  | System's full hostname |

**Example**: \`https://sync-server-hostname/%machine_id%/%file_identifier%\`
`,
      type: "string",
    },
    {
      key: "EventDetailText",
      description: `Related to the above property, this string represents the text to show on the button`,
      type: "string",
    },
    {
      key: "DismissText",
      description: `The text to display on the button that dismisses the binary block dialog. The default text is
        "Dismiss"`,
      type: "string",
    },
    {
      key: "UnknownBlockMessage",
      description: `In Lockdown mode this is the message shown to the user when an unknown binary is blocked.
        If this message is not configured a reasonable default is provided`,
      type: "string",
    },
    {
      key: "BannedBlockMessage",
      description: `This is the message shown to the user when a binary is blocked because of a rule if that rule
        doesn't provide a custom message. If this is not configured a reasonable default is provided`,
      type: "string",
    },
    {
      key: "ModeNotificationMonitor",
      description: `The notification text to display when the client goes into Monitor mode.`,
      type: "string",
      defaultValue: "Switching into Monitor mode",
    },
    {
      key: "ModeNotificationLockdown",
      description: `The notification text to display when the client goes into Lockdown mode.`,
      type: "string",
      defaultValue: "Switching into Lockdown mode",
    },
    {
      key: "BannedUSBBlockMessage",
      description: `Message to display when a USB device is prevented from being mounted`,
      type: "string",
    },
    {
      key: "RemountUSBBlockMessage",
      description: `Message to display when a USB device is allowed to be mounted with a subset of the requested flags
        as defined by \`RemountUSBMode\``,
      type: "string",
    },
    {
      key: "FileAccessBlockMessage",
      description: `This is the message shown to the user when a access to a file is blocked because of a rule
        defined by \`FileAccessPolicy\` if that rule doesn't provide a custom message. If this is not configured a
        reasonable default is provided`,
      type: "string",
    },
    {
      key: "EnableNotificationSilences",
      description: `If false, the user will not be presented with an option to silence notifications`,
      type: "bool",
      defaultValue: true,
      versionAdded: "2025.2",
    },
  ],
  telemetry: [
    {
      key: "FileChangesRegex",
      description: `The regex of paths to log file changes. Regexes are specified in ICU format`,
      type: "string",
    },
    {
      key: "FileChangesPrefixFilters",
      description: `Array of path prefix strings. When an event is logged, if the target
        path (e.g. the file being written/removed/etc ) matches a prefix it will not be logged`,
      type: "string",
      repeated: true,
    },
    {
      key: "Telemetry",
      description: `Array of strings for events that should be logged`,
      type: "string",
      repeated: true,
      defaultValue: ["Everything"],
      possibleValues: [
        { value: "Everything" },
        { value: "Execution" },
        { value: "Fork" },
        { value: "Exit" },
        { value: "Close" },
        { value: "Rename" },
        { value: "Unlink" },
        { value: "Link" },
        { value: "ExchangeData" },
        { value: "Disk" },
        { value: "Bundle" },
        { value: "Allowlist" },
        { value: "FileAccess" },
        { value: "CodesigningInvalidated" },
        { value: "LoginWindowSession" },
        { value: "LoginLogout" },
        { value: "ScreenSharing" },
        { value: "OpenSSH" },
        { value: "Authentication" },
        { value: "Clone" },
        { value: "Copyfile" },
        { value: "GatekeeperOverride" },
        { value: "LaunchItem" },
        { value: "None" },
      ],
      versionAdded: "2024.11",
    },
    {
      key: "EnableForkAndExitLogging",
      description: `If true, Santa will log \`FORK\` and \`EXIT\` events.

Use the new \`Telemetry\` key instead.`,
      type: "bool",
      defaultValue: false,
      versionDeprecated: "2024.11",
    },
    {
      key: "EventLogType",
      description: `Defines how event logs are stored.

Note: The \`protobuf\` and \`JSON\` formats are in BETA and subject to change. We will call out any
changes in the release notes of any future release that changes them.`,
      type: "string",
      possibleValues: [
        {
          value: "syslog",
          description: "Sent to the macOS Unified Logging Systen",
        },
        { value: "filelog", description: "Sent to a file on disk" },
        {
          value: "protobuf",
          description:
            "(BETA) Sent to file on disk using a maildir-like format",
        },
        {
          value: "json",
          description:
            "(BETA) Same as file but output is one JSON object per line",
        },
        { value: "null", description: "Don't output any event logs" },
      ],
      defaultValue: "filelog",
    },
    {
      key: "EventLogPath",
      description: `If \`EventLogType\` is set to \`filelog\` or \`json\`, EventLogPath will provide the path to save logs.
        If you change this value ensure you also update \`com.northpolesec.santa.newsyslog.conf\` with the new path`,
      type: "string",
      defaultValue: "/var/db/santa/santa.log",
    },
    {
      key: "SpoolDirectory",
      description: `If \`EventLogType\` is set to \`protobuf\`, SpoolDirectory will provide the base directory used to
        save files according to a maildir-like format`,
      type: "string",
      defaultValue: "/var/db/santa/spool",
    },
    {
      key: "SpoolDirectoryFileSizeThresholdKB",
      description: `If \`EventLogType\` is set to \`protobuf\`, SpoolDirectoryFileSizeThresholdKB defines the per-file size
        limit for files stored in the spool directory. Events are buffered in memory until this threshold would be
        exceeded (or \`SpoolDirectoryEventMaxFlushTimeSec\` is exceeded)`,
      type: "integer",
      defaultValue: 100,
    },
    {
      key: "SpoolDirectorySizeThresholdMB",
      description: `If \`EventLogType\` is set to \`protobuf\`, SpoolDirectorySizeThresholdMB defines the total combined size
        limit of all files in the spool directory. Once the threshold is met, no more events will be saved`,
      type: "integer",
      defaultValue: 100,
    },
    {
      key: "SpoolDirectoryEventMaxFlushTimeSec",
      description: `If \`EventLogType\` is set to \`protobuf\`, SpoolDirectoryEventMaxFlushTimeSec defines the maximum amount
        of time events will stay buffered in memory before being flushed to disk, regardless of whether or not
        \`SpoolDirectoryFileSizeThresholdKB\` would be exceeded`,
      type: "integer",
      defaultValue: 10,
    },
    {
      key: "EnableMachineIDDecoration",
      description: `If \`EventLogType\` is set to \`filelog\` and this key is true, the \`MachineID\` to the end of
      each log line.`,
      type: "bool",
      defaultValue: false,
    },
    {
      key: "EntitlementsPrefixFilter",
      description: `Entitlement prefixes that should not be logged (for example: \`com.apple.private\`).`,
      type: "string",
      repeated: true,
    },
    {
      key: "EntitlementsTeamIDFilter",
      description: `Entitlements from processes with a matching TeamID in the code signature
        will not be logged. Use the value \`platform\` to filter entitlements from platform binaries.`,
      type: "string",
      repeated: true,
    },
  ],
  faa: [
    {
      key: "FileAccessPolicyPlist",
      description: `Path to a file access configuration plist. This is ignored if \`FileAccessPolicy\` is also set.
        See [File Access Authorization](/features/faa) for configuration details.`, // TODO: Link to FAA config page
      type: "string",
      versionAdded: "2023.1",
    },
    {
      key: "FileAccessPolicy",
      description: `A complete file access configuration policy embedded in the main Santa config.
        If set, \`FileAccessPolicyPlist\` will be ignored. See File Access Authorization for configuration details`,
      type: "dict",
      subFields: [
        {
          key: "Version",
          description:
            "Version of the configuration. Will be reported in events",
          type: "string",
        },
        {
          key: "EventDetailURL",
          description: `When the user gets a block notification, a button can be displayed which will take them to a web
          page with more information about that event. This URL will be used for all rules unless overridden by a
          rule-specific option. See the EventDetailURL section below.`,
          type: "string",
          versionAdded: "2023.8",
        },
        {
          key: "EventDetailText",
          description: `Related to EventDetailURL, controls the button text that will be displayed`,
          type: "string",
          maxLength: 48,
          versionAdded: "2023.8",
        },
        {
          key: "WatchItems",
          description: `The set of configuration items that will be monitored by Santa`,
          type: "dict",
          subFields: [
            {
              key: "<Name>",
              description: `A unique name that identifies a single watch item rule. This value will be reported in
              events. The name must be a legal C identifier`,
              type: "dict",
              subFields: [
                {
                  key: "Paths",
                  description: "",
                  type: "dict",
                  repeated: true,
                  subFields: [
                    {
                      key: "Path",
                      description: "The path glob to monitor",
                      type: "string",
                    },
                    {
                      key: "IsPrefix",
                      description: `Whether or not the path glob represents a prefix path. (Default = false)`,
                      type: "bool",
                      defaultValue: false,
                    },
                  ],
                },
                {
                  key: "Options",
                  description: `Customizes the actions for a given rule`,
                  type: "dict",
                  subFields: [
                    {
                      key: "AllowReadAccess",
                      description: `If true, indicates the rule will not be applied to actions that are read-only access
                      (e.g., opening a watched path for reading, or cloning a watched path). If false, the rule will
                      apply both to read-only access and access that could modify the watched path`,
                      type: "bool",
                      defaultValue: false,
                    },
                    {
                      key: "AuditOnly",
                      description: `If true, operations violating the rule will only be logged. If false, operations
                      violating the rule will be denied and logged`,
                      type: "bool",
                      defaultValue: true,
                    },
                    {
                      key: "InvertProcessExceptions",
                      description: `Please use \`RuleType\` instead. If false, behaves like RuleType
                      \`PathsWithAllowedProcesses\`. If true, behaves like RuleType \`PathsWithDeniedProcesses\`. This
                      setting is overriden if RuleType is set`,
                      type: "bool",
                      versionDeprecated: "2024.11",
                    },
                    {
                      key: "RuleType",
                      description: `Defines how \`Paths\` and \`Processes\` are interpreted`,
                      type: "string",
                      possibleValues: [
                        {
                          value: "PathsWithAllowedProcesses",
                          versionAdded: "2024.11",
                          description: `Access to the defined \`Paths\` will be denied (or audited) for all processes
                          that **don't match** items in the \`Processes\` array`,
                        },
                        {
                          value: "PathsWithDeniedProcesses",
                          versionAdded: "2024.11",
                          description: `Access to the defined \`Paths\` will be denied (or audited) for all processes
                          that **match** items in the \`Processes\` array`,
                        },
                        {
                          value: "ProcessesWithAllowedPaths",
                          versionAdded: "2025.2",
                          description: `The defined processes will have access denied (or audited) to all paths that
                          **don't match** items in the \`Paths\ array`,
                        },
                        {
                          value: "ProcessesWithDeniedPaths",
                          versionAdded: "2025.2",
                          description: `The defined processes will have access denied (or audited) to all paths that
                          **match** items in the \`Paths\` array`,
                        },
                      ],
                      defaultValue: "PathsWithAllowedProcesses",
                    },
                    {
                      key: "EnableSilentMode",
                      description: `If true, Santa will not display a GUI dialog when this rule is violated`,
                      type: "bool",
                      versionAdded: "2023.7",
                    },
                    {
                      key: "EnableSilentTTYMode",
                      description: `If true, Santa will not post a message to the controlling TTY when this rule is
                      violated`,
                      type: "bool",
                      versionAdded: "2023.7",
                    },
                    {
                      key: "EventDetailURL",
                      description: `Rule-specific URL that overrides the top-level \`EventDetailURL\``,
                      type: "string",
                      versionAdded: "2023.8",
                    },
                    {
                      key: "EventDetailText",
                      description: `Rule-specific button text that overrides the top-level \`EventDetailText\``,
                      type: "string",
                      versionAdded: "2023.8",
                    },
                  ],
                },
                {
                  key: "Processes",
                  description: `A list of dictionaries defining processes that are allowed to access paths matching the
                  globs defined with the \`Paths\` key. For a process performing the operation to be considered a match,
                  it must match all defined attributes of at least one entry in the list`,
                  type: "dict",
                  repeated: true,
                  subFields: [
                    {
                      key: "BinaryPath",
                      description: `A path literal that an instigating process must be executed from`,
                      type: "string",
                    },
                    {
                      key: "TeamID",
                      description: `Team ID of the instigating process`,
                      type: "string",
                    },
                    {
                      key: "CertificateSha256",
                      description: `SHA256 of the leaf certificate of the instigating process`,
                      type: "string",
                    },
                    {
                      key: "CDHash",
                      description: `CDHash of the instigating process`,
                      type: "string",
                    },
                    {
                      key: "SigningID",
                      description: `Signing ID of the instigating process. The first asterisk (\`*\`) character in the
                      value will be treated as a wildcard character and can appear at any index in the string. For
                      example, \`com.northpolesec.*\` and \`com.northpolesec.*.daemon\` are both allowed. When the
                      SigningID contains a wildcard character, either PlatformBinary must be true or TeamID must also be
                      set. Note that unlike in binary authorization, the Signing ID for file access authorization is
                      specified separately from the Team ID`,
                      type: "string",
                    },
                    {
                      key: "PlatformBinary",
                      description: `Whether or not the instigating process is a platform binary`,
                      type: "bool",
                      versionAdded: "2023.2",
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      versionAdded: "2023.1",
    },
    {
      key: "FileAccessPolicyUpdateIntervalSec",
      description: `Number of seconds between re-reading the file access policy config and policies/monitored paths
        updated`,
      type: "integer",
      defaultValue: 600,
    },
    {
      key: "OverrideFileAccessAction",
      description: `Defines a global override policy that applies to the enforcement of all FileAccessPolicy rules.`,
      type: "string",
      syncConfigurable: true,
      defaultValue: "none",
      possibleValues: [
        {
          value: "AUDIT_ONLY",
          description: "no access will be blocked, only logged",
        },
        {
          value: "DISABLE",
          description: "no access will be blocked or logged",
        },
        {
          value: "none",
          description: "enforce policy as defined in each rule",
        },
      ],
    },
  ],
  usb: [
    {
      key: "BlockUSBMount",
      description: "If true, blocking USB Mass storage feature is enabled.",
      type: "bool",
      syncConfigurable: true,
      defaultValue: false,
    },
    {
      key: "RemountUSBMode",
      description: `Array of strings for arguments to pass to \`mount -o\` when forcibly remounting devices.`,
      type: "string",
      syncConfigurable: true,
      repeated: true,
      possibleValues: [
        { value: "rdonly" },
        { value: "noexec" },
        { value: "nosuid" },
        { value: "nobrowse" },
        { value: "noowners" },
        { value: "nodev" },
        { value: "async" },
        { value: "-j" },
      ],
    },
    {
      key: "OnStartUSBOptions",
      description: `If set, defines the action that should be taken on existing USB mounts when Santa starts up.

**Note**: “remounts” are implemented by first unmounting and then mounting the device again). Existing mounts with
mount flags that are a superset of \`RemountUSBMode\` are unaffected and left as-is.`,
      type: "string",
      syncConfigurable: true,
      possibleValues: [
        { value: "Unmount" },
        { value: "ForceUnmount" },
        { value: "Remount" },
        { value: "ForceRemount" },
      ],
    },
  ],
  metrics: [
    {
      key: "MetricFormat",
      description: `Format to export metrics as.`,
      type: "string",
      possibleValues: [
        {
          value: "rawjson",
          description: "A single JSON blob containing all metrics",
        },
        {
          value: "monarchjson",
          description:
            "A format consumable by Google's internal Monarch tooling.",
        },
      ],
    },
    {
      key: "MetricURL",
      description: "URL describing where monitoring metrics should be exported",
      type: "string",
    },
    {
      key: "MetricExportInterval",
      description: "Number of seconds to wait between exporting metrics",
      type: "integer",
      defaultValue: 30,
    },
    {
      key: "MetricExportTimeout",
      description:
        "Number of seconds to wait before a timeout occurs when exporting metrics",
      type: "integer",
      defaultValue: 30,
    },
    {
      key: "MetricExtraLabels",
      type: "dict",
      description: `A map of key value pairs to add to all metric root labels.
        If a previously set key (e.g. host_name is set to "" then the key is removed from the metric root labels.
        Alternatively if a value is set for an existing key then the new value will override the old.`,
    },
  ],
  rules: [
    {
      key: "AllowedPathRegex",
      description: `A regex to allow if the binary, certificate, or Team ID scopes did not allow/block execution.
        Regexes are specified in ICU format.`,
      type: "string",
      syncConfigurable: true,
    },
    {
      key: "BlockedPathRegex",
      description: `A regex to block if the binary, certificate, or Team ID scopes did not allow/block an execution.
        Regexes are specified in ICU format.`,
      type: "string",
      syncConfigurable: true,
    },
    {
      key: "EnableBadSignatureProtection",
      description: `If true, binaries with a bad signing chain will be blocked even in \`MONITOR\` mode, **unless**
        the binary is allowed by an explicit rule.`,
      type: "bool",
      defaultValue: false,
    },
    {
      key: "EnablePageZeroProtection",
      description: `If true, 32-bit binaries that are missing the \`__PAGEZERO\` segment will be blocked even in
        \`MONITOR\` mode, **unless** the binary is allowed by an explicit rule.`,
      type: "bool",
      defaultValue: true,
    },
    {
      key: "EnableTransitiveRules",
      description: `If true, Santa will respect compiler rules and create allow rules for the executables they produce.`,
      type: "bool",
      syncConfigurable: true,
      defaultValue: false,
    },
    {
      key: "StaticRules",
      description: `A static set of rules to always apply to the host. These rules always take precedence over any
      configured by a sync server. Having this key set will also prevent local configuration of rules using the
      \`santactl rule\` command.

Within the set of rules configured as StaticRules, the normal [rule precedence](/features/binary-authorization)
order applies.

The intended use-case for StaticRules is for a small hardcoded set of rules that every host at a company will need to
run even in emergencies, such as management tools. Santa heavily caches these rules and we've seen hosts with a few
thousand static rules working correctly, but we don't recommend using StaticRules for this.`,
      type: "dict",
      repeated: true,
      subFields: [
        {
          key: "identifier",
          type: "string",
          description: `The identifier for this rule`,
        },
        {
          key: "policy",
          type: "string",
          description: `The policy for this rule`,
          possibleValues: [
            { value: "ALLOWLIST", label: "Allowlist" },
            { value: "ALLOWLIST_COMPILER", label: "Allowlist Compiler" },
            { value: "BLOCKLIST", label: "Blocklist Compiler" },
            { value: "SILENT_BLOCKLIST", label: "Silent Blocklist" },
          ],
        },
        {
          key: "rule_type",
          type: "string",
          description: `The rule type for this rule`,
          possibleValues: [
            { value: "BINARY", label: "Binary" },
            { value: "CDHASH", label: "CDHash" },
            { value: "SIGNINGID", label: "Signing ID" },
            { value: "CERTIFICATE", label: "Certificate" },
            { value: "TEAMID", label: "Team ID" },
          ],
        },
      ],
    },
  ],
  sync: [
    {
      key: "SyncBaseURL",
      description: `The base URL of the sync server`,
      type: "string",
    },
    {
      key: "SyncEnableProtoTransfer",
      description: `If true, sync will happen using binary protos instead of JSON`,
      type: "bool",
      defaultValue: false,
    },
    {
      key: "SyncProxyConfiguration",
      description: `The proxy configuration to use when syncing.
        See the Apple Documentation for details on the keys that can be used in this dictionary`,
      type: "dict",
    },
    {
      key: "SyncEnableCleanSyncEventUpload",
      description: `If true, events will be uploaded to the sync server even if a clean sync is requested`,
      type: "bool",
      defaultValue: false,
    },
    {
      key: "ClientAuthCertificateFile",
      description: `If set, this contains the location of a PKCS#12 certificate to be used for sync authentication`,
      type: "string",
    },
    {
      key: "ClientAuthCertificatePassword",
      description: `Contains the password for the PKCS#12 certificate`,
      type: "string",
    },
    {
      key: "ClientAuthCertificateCN",
      description: `If set, this is the Common Name of a certificate in the System keychain to be used for sync
        authentication. The corresponding private key must also be in the keychain`,
      type: "string",
    },
    {
      key: "ClientAuthCertificateIssuerCN",
      description: `If set, this is the Issuer Name of a certificate in the System keychain to be used for sync
        authentication. The corresponding private key must also be in the keychain`,
      type: "string",
    },
    {
      key: "ServerAuthRootsData",
      description: `If set, this is valid PEM containing one or more certificates to be used for certificate pinning.
        To comply with ATS the certificate chain must also be trusted in the keychain`,
      type: "data",
    },
    {
      key: "ServerAuthRootsFile",
      description: `The same as the above but is a path to a file on disk containing the PEM data`,
      type: "string",
    },
    {
      key: "MachineOwner",
      description: `The machine owner`,
      type: "string",
    },
    {
      key: "MachineID",
      description: `The machine ID`,
      type: "string",
    },
    {
      key: "MachineOwnerPlist",
      description: `The path to a plist that contains the \`MachineOwnerKey\` / value pair`,
      type: "string",
    },
    {
      key: "MachineOwnerKey",
      description: `The key to use on \`MachineOwnerPlist\``,
      type: "string",
    },
    {
      key: "MachineIDPlist",
      description: `The path to a plist that contains the \`MachineOwnerKey\` / value pair`,
      type: "string",
    },
    {
      key: "MachineIDKey",
      description: `The key to use on \`MachineIDPlist\``,
      type: "string",
    },
    {
      key: "EnableAllEventUpload",
      description: `If true, the client will upload all execution events to the sync server, including those that
        were explicitly allowed`,
      type: "bool",
      syncConfigurable: true,
      defaultValue: false,
    },
    {
      key: "DisableUnknownEventUpload",
      description: `If true, the client will not upload events for executions of unknown binaries allowed in
        monitor mode`,
      type: "bool",
      syncConfigurable: true,
      defaultValue: false,
    },
    {
      key: "SyncClientContentEncoding",
      description: `Sets the Content-Encoding header for requests sent to the sync service`,
      type: "string",
      possibleValues: [
        { value: "deflate" },
        { value: "gzip" },
        { value: "none" },
      ],
      defaultValue: "deflate",
    },
    {
      key: "SyncExtraHeaders",
      description: `Dictionary of additional headers to include in all requests made to the sync server.
        System managed headers such as \`Content-Length\`, \`Host\`, \`WWW-Authenticate\` etc will be ignored`,
      type: "dict",
    },
  ],
};
